getgenv().autotap = false
getgenv().autoRebirth = false
getgenv().AutoUpgrade = false

local remotePath = game:GetService("ReplicatedStorage").Aero.AeroRemoteServices;




function doTap()
    spawn(function ()
        while autotap == true do
            local args = {[1] = 1}
            remotePath.ClickService.Click:FireServer(unpack(args))
            wait()
        end
    end)
end

function autoRebirth(rebirthAmount)
    spawn(function()
        while getgenv().autoRebirth == true do
        local args = {[1] = rebirthAmount}
        game:GetService("ReplicatedStorage").Aero.AeroRemoteServices.RebirthService.BuyRebirths:FireServer(unpack(args))
        wait(1)           
        end
    end)
end


function autoUpgrade(upgradeType)
    spawn(function()
        while AutoUpgrade == true do
            local args = {[1] = upgradeType}
            remotePath.UpgradeService.BuyUpgrade:FireServer(unpack(args))
            wait(1)
        end

    end) 
end



function getCurrentPOS()
    local player = game.Players.LocalPlayer
    if player.Character then
        return player.Chracter.HumaniodRootPart.Position
    end
    return false 
end

function teleportTo(placeCFrame)
    local player = game.Players.LocalPlayer
    if player.Character then
        player.Character.HumanoidRootPart.CFrame = placeCFrame
    end
end

function teleportWorld(world)
    if game:GetService("Workspace").Worlds:FindFirstChild(world) then
        teleportTo(game:GetService("Workspace").Worlds[world].Teleport.CFrame)
    end
end





local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua')))()

local w = library:CreateWindow("Clicking Madness") -- Creates the window

local b = w:CreateFolder("Farming")

local d = w:CreateFolder("Teleporting")

local e = w:CreateFolder("Created by ")

b:Toggle("Auto Tap",function(bool)
    getgenv().autotap = bool
    print('Auto Tap Is:',bool)
    if bool then
        doTap()
    end
end)

local selectedRebirth

b:Dropdown("Rebirth Selection",{"1","10","100","1000","10000","100000","1000000","10000000","100000000","1000000000","10000000000","100000000000"},true,function(value) --true/false, replaces the current title "Dropdown" with the option that t
    selectedRebirth = value
    print(value)
end)

b:Toggle("Auto Rebirth",function(bool)
    getgenv().autoRebirth = bool
    print('Auto Rebirth Is:',bool)
    if bool then
        autoRebirth(selectedRebirth)
    end
end)

local selectedUpgrade

b:Dropdown("Upgrades",{"ClickMultiplier","CursorDamage","Health","JumpPower", "PetStorage","WalkSpeed",},true,function(value) --true/false, replaces the current title "Dropdown" with the option that t
    selectedUpgrade = value
    print(value)
end)

b:Toggle("Auto Upgrade",function(bool)
    getgenv().AutoUpgrade = bool
    print('Auto Upgrade Is:',bool)
    if bool then 
        autoUpgrade(selectedUpgrade)
    end
end) 

local selectedWorld

d:Dropdown("Worlds",{"Lava","Desert","Ocean","Winter","Toxic","Candy","Forest","Storm","Blocks","Space","Dominus","Infinity","Furute","Fire","Moon","City",},true,function(value) --true/false, replaces the current title "Dropdown" with the option that t
    selectedWorld = value
    print(value)
end)

d:Button("Teleport Selected",function()
    if selectedWorld then
        teleportWorld(selectedWorld)
    end
end)

b:DestroyGui()

--b:Toggle("Toggle",function(bool)
   -- shared.toggle = bool
   -- print(shared.toggle)
--end)

--b:Slider("Slider",{
   -- min = 10; -- min value of the slider
   -- max = 50; -- max value of the slider
   -- precise = true; -- max 2 decimals
--},function(value)
    --print(value)
--end)

--b:Dropdown("Dropdown",{"A","B","C"},true,function(mob) --true/false, replaces the current title "Dropdown" with the option that t
    --print(mob)
--end)

--b:Bind("Bind",Enum.KeyCode.C,function() --Default bind
    --print("Yes")
--end)

--b:ColorPicker("ColorPicker",Color3.fromRGB(255,0,0),function(color) --Default color
    --print(color)
--end)

--b:Box("Box","number",function(value) -- "number" or "string"
--    print(value)
--end)
